# ------------------------------------------------------------------------------
# Valgrind
# ------------------------------------------------------------------------------

set(MEMORYCHECK_COMMAND_OPTIONS "${MEMORYCHECK_COMMAND_OPTIONS} --verbose")
set(MEMORYCHECK_COMMAND_OPTIONS "${MEMORYCHECK_COMMAND_OPTIONS} --leak-check=full")
set(MEMORYCHECK_COMMAND_OPTIONS "${MEMORYCHECK_COMMAND_OPTIONS} --track-fds=yes")
set(MEMORYCHECK_COMMAND_OPTIONS "${MEMORYCHECK_COMMAND_OPTIONS} --trace-children=yes")
set(MEMORYCHECK_COMMAND_OPTIONS "${MEMORYCHECK_COMMAND_OPTIONS} --error-exitcode=1")

# ------------------------------------------------------------------------------
# Includes
# ------------------------------------------------------------------------------

include(CTest)
include(ExternalProject)

# ------------------------------------------------------------------------------
# Packages
# ------------------------------------------------------------------------------

find_package(Git REQUIRED)

# ------------------------------------------------------------------------------
# Options
# ------------------------------------------------------------------------------

option(BUILD_SHARED_LIBS "build shared libraries" ON)

# ------------------------------------------------------------------------------
# Detect 32bit
# ------------------------------------------------------------------------------

if(NOT CMAKE_CXX_SIZEOF_DATA_PTR STREQUAL "8")
    message(FATAL_ERROR "Only 64bit builds are supported")
endif()

# ------------------------------------------------------------------------------
# Install Symlink
# ------------------------------------------------------------------------------

macro(install_symlink filepath sympath)
    if(NOT WIN32 STREQUAL "1")
        install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} -E create_symlink ${filepath} ${sympath})")
        install(CODE "message(STATUS \"Created symlink: ${sympath} -> ${filepath}\")")
    endif()
endmacro(install_symlink)

# ------------------------------------------------------------------------------
# Prefix
# ------------------------------------------------------------------------------

message(STATUS "Install path: ${CMAKE_INSTALL_PREFIX}")

# ------------------------------------------------------------------------------
# OS
# ------------------------------------------------------------------------------

execute_process(COMMAND uname -o OUTPUT_VARIABLE UNAME OUTPUT_STRIP_TRAILING_WHITESPACE)

if(UNAME STREQUAL "Cygwin" OR WIN32 STREQUAL "1")
    set(OSTYPE "WIN64")
else()
    set(OSTYPE "UNIX")
endif()

message(STATUS "OS Type: ${OSTYPE}")

# ------------------------------------------------------------------------------
# ABI
# ------------------------------------------------------------------------------

if(OSTYPE STREQUAL "WIN64")
    set(ABITYPE "MS64")
else()
    set(ABITYPE "SYSV")
endif()

message(STATUS "ABI Type: ${ABITYPE}")

# ------------------------------------------------------------------------------
# Nasm Support
# ------------------------------------------------------------------------------

if(NOT WIN32 STREQUAL "1")
    find_program(NASM_BIN nasm)

    if(NASM_BIN STREQUAL "NASM_BIN-NOTFOUND")
        message(FATAL_ERROR "Unable to find nasm, or nasm is not installed")
    endif()

    execute_process(COMMAND ${NASM_BIN} -v OUTPUT_VARIABLE NASM_ID OUTPUT_STRIP_TRAILING_WHITESPACE)
    set(CMAKE_ASM_NASM_COMPILER_ID ${NASM_ID})

    if(CMAKE_TOOLCHAIN_FILE)
        set(CMAKE_ASM_NASM_OBJECT_FORMAT "elf64")
    endif()

    enable_language(ASM_NASM)

    set(CMAKE_ASM_NASM_FLAGS "-d ${ABITYPE}")
    set(CMAKE_ASM_NASM_CREATE_SHARED_LIBRARY TRUE)
    set(CMAKE_ASM_NASM_CREATE_STATIC_LIBRARY TRUE)
endif()

# ------------------------------------------------------------------------------
# Target Information
# ------------------------------------------------------------------------------

if(CMAKE_TOOLCHAIN_FILE)

    message(STATUS "Cross Compiling Enabled")

    get_filename_component(CMAKE_C_COMPILER_NAME ${CMAKE_C_COMPILER} NAME)
    get_filename_component(CMAKE_CXX_COMPILER_NAME ${CMAKE_CXX_COMPILER} NAME)

    string(REPLACE "-" ";" CMAKE_C_COMPILER_LIST ${CMAKE_C_COMPILER_NAME})
    string(REPLACE "-" ";" CMAKE_CXX_COMPILER_LIST ${CMAKE_CXX_COMPILER_NAME})

    list(LENGTH CMAKE_C_COMPILER_LIST CMAKE_C_COMPILER_LIST_LEN)
    list(LENGTH CMAKE_CXX_COMPILER_LIST CMAKE_CXX_COMPILER_LIST_LEN)

    if(CMAKE_C_COMPILER_LIST_LEN LESS 3)
        message(FATAL_ERROR "Invalid C compiler. Expecting triple format: arch-os-compiler or arch-os-compiler-version")
    endif()

    if(CMAKE_CXX_COMPILER_LIST_LEN LESS 3)
        message(FATAL_ERROR "Invalid CXX compiler. Expecting triple format: arch-os-compiler or arch-os-compiler-version")
    endif()

    list(GET CMAKE_C_COMPILER_LIST 0 CMAKE_C_COMPILER_ARCH)
    list(GET CMAKE_CXX_COMPILER_LIST 0 CMAKE_CXX_COMPILER_ARCH)

    list(GET CMAKE_C_COMPILER_LIST 1 CMAKE_C_COMPILER_OS)
    list(GET CMAKE_CXX_COMPILER_LIST 1 CMAKE_CXX_COMPILER_OS)

    if(NOT ${CMAKE_C_COMPILER_ARCH} STREQUAL ${CMAKE_CXX_COMPILER_ARCH})
        message(FATAL_ERROR "Invalid C/CXX compiler combination. Non-matching arch")
    endif()

    if(NOT ${CMAKE_C_COMPILER_OS} STREQUAL ${CMAKE_CXX_COMPILER_OS})
        message(FATAL_ERROR "Invalid C/CXX compiler combination. Non-matching OS")
    endif()

    set(BAREFLANK_TARGET_ARCH ${CMAKE_C_COMPILER_ARCH})
    set(BAREFLANK_TARGET_OS ${CMAKE_C_COMPILER_OS})

    set(BAREFLANK_TARGET ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf)
    set(BAREFLANK_SYSROOT_PATH ${CMAKE_INSTALL_PREFIX}/sysroots/${BAREFLANK_TARGET})

    find_program(CMAKE_AR ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf-ar)

    message(STATUS "Cross Compiler AR: ${CMAKE_AR}")

else()

    set(BAREFLANK_TARGET_ARCH "x86_64")
    set(BAREFLANK_TARGET_OS "vmm")

    set(BAREFLANK_TARGET ${BAREFLANK_TARGET_ARCH}-${BAREFLANK_TARGET_OS}-elf)
    set(BAREFLANK_SYSROOT_PATH ${CMAKE_INSTALL_PREFIX}/sysroots/${BAREFLANK_TARGET})

endif()

message(STATUS "Cross Compiler Target: ${BAREFLANK_TARGET}")
message(STATUS "Cross Compiler Sysroot: ${BAREFLANK_SYSROOT_PATH}")

# ------------------------------------------------------------------------------
# Testing
# ------------------------------------------------------------------------------

if(ENABLE_COVERAGE OR
   ENABLE_COVERAGE_LLVM OR
   ENABLE_TIDY OR
   ENABLE_DYNAMIC_USAN OR
   ENABLE_DYNAMIC_ASAN)
    set(ENABLE_UNITTESTING ON)
endif()

if(ENABLE_UNITTESTING)
    include(${CMAKE_CURRENT_LIST_DIR}/CMakeOption_Testing.txt)
    message(STATUS "Unit Testing Enabled")
endif()

if(ENABLE_TIDY)
    set(CMAKE_EXPORT_COMPILE_COMMANDS ON)
endif()

# ------------------------------------------------------------------------------
# Flag Information
# ------------------------------------------------------------------------------

if(BAREFLANK_TOOLCHAIN_FLAGS)
    message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/${BAREFLANK_TOOLCHAIN_FLAGS}")
    include(${CMAKE_CURRENT_LIST_DIR}/${BAREFLANK_TOOLCHAIN_FLAGS})
else()
    if(WIN32 STREQUAL "1")
        message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_VS.txt")
        include(${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_VS.txt)
    else()
        message(STATUS "Flags: ${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_GCC.txt")
        include(${CMAKE_CURRENT_LIST_DIR}/CMakeFlags_Native_GCC.txt)
    endif()
endif()

# ------------------------------------------------------------------------------
# Custom Targets
# ------------------------------------------------------------------------------

if(NOT WIN32 STREQUAL "1")
    include(${CMAKE_CURRENT_LIST_DIR}/CMakeTarget_Tidy.txt)
endif()

include(${CMAKE_CURRENT_LIST_DIR}/CMakeTarget_Format.txt)
